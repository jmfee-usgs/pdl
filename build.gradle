/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

plugins {
  id "java"
  id "jacoco"
  id "com.gradle.build-scan" version "1.16"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

ext {
  getGitCommit = { gitDir ->
    def cmd = "git --git-dir=${gitDir}/.git rev-parse HEAD"
    return cmd.execute().text.replace("\n", "") ?: "unknown"
  }
}

configurations {
  codacy
}

dependencies {
  codacy "com.codacy:codacy-coverage-reporter:4.0+"

  compile files("lib/eqmessageutils.jar")
  compile "com.googlecode.json-simple:json-simple:1.1.1"
  compile "mysql:mysql-connector-java:5.1+"
  compile "ch.ethz.ganymed:ganymed-ssh2:262"
  compile files("lib/sqlitejdbc-v056.jar")
  compile files("lib/QWFileOutClient.jar")
  // XMLVerifier uses this, but is excluded for now
  // compile files("lib/cap-library-r11.jar")

  testCompile "junit:junit-dep:4.11"
}

sourceSets {
  main {
    java {
      srcDirs = ["src"]
      excludes = [
        "**/*Test*",
        "**/XmlVerifier*"
      ]
    }
    resources {
      srcDirs = ["."]
      includes = [
        "etc/config/config.ini",
        "etc/config/regions.xml",
        "etc/schema/notificationIndex.db",
        "etc/schema/productIndex.db"
      ]
    }
  }
  test {
    java {
      srcDirs = ["src"]
      include "**/*Test*"
    }
  }
}


buildScan {
  termsOfServiceUrl = 'https://gradle.com/terms-of-service'
  termsOfServiceAgree = 'yes'
}

clean.doFirst {
  print(configurations.compile.asPath)

  delete("bin")
  delete("EIDSClient_tracking.dat")
  delete("heartbeat.dat")
  delete("log")
  delete("productIndex.db")
  delete("pd_index.db")
  delete("storage")
  delete("T")
  delete("test_index.db")
  delete("testReceiverStorage")
  delete("testSenderPolldir")
  delete("testSenderStorage")
}

jacocoTestReport {
  reports {
    html.enabled true
    xml.enabled true
  }
}
check.dependsOn jacocoTestReport

jar {
  manifest {
    attributes "Git-Commit": getGitCommit('.')
    attributes "Main-Class": "gov.usgs.earthquake.distribution.Bootstrap"
  }
  baseName = "pdl"
  from {
      configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

javadoc {
  failOnError = false
}

test {
  systemProperty "com.sun.xml.bind.v2.bytecode.ClassTailor.noOptimize", "true"
  filter {
    includeTestsMatching "*Test"
  }
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
        "report",
        "-l",
        "Java",
        "-r",
        "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}

tasks.withType(JavaCompile) {
  options.setDeprecation(true);
  options.setWarnings(true);
}